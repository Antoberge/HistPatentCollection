"""Lib of var used in patencity CLI"""
import json

GEOC_URL = "https://batch.geocoder.ls.hereapi.com/6.2/jobs"
GEOC_OUTCOLS = [
    "recId",
    "seqNumber",
    "seqLength",
    "latitude",
    "longitude",
    "locationLabel",
    "addressLines",
    "street",
    "houseNumber",
    "building",
    "subdistrict",
    "district",
    "city",
    "postalCode",
    "county",
    "state",
    "country",
    "relevance",
    "matchType",
    "matchCode",
    "matchLevel",
    "matchQualityStreet",
    "matchQualityHouseNumber",
    "matchQualityBuilding",
    "matchQualityDistrict",
    "matchQualityCity",
    "matchQualityPostalCode",
    "matchQualityCounty",
    "matchQualityState",
    "matchQualityCountry",
]
HERE2GMAPS = {
    "recId": "recId",
    "seqNumber": "seqNumber",
    "seqLength": "",
    "latitude": "lat",
    "longitude": "lng",
    "locationLabel": "formatted_address",
    "addressLines": "",
    "street": "route_long_name",
    "houseNumber": "street_number_long_name",
    "building": "premise_long_name",
    "subdistrict": "",
    "district": "sublocality_long_name",
    "city": "locality_long_name",
    "postalCode": "postal_code_long_name",
    "county": "administrative_area_level_2_long_name",
    "state": "administrative_area_level_1_long_name",
    "country": "country_short_name",
    "relevance": "",
    "matchType": "location_type",
    "matchCode": "",
    "matchLevel": "",
    "matchQualityStreet": "",
    "matchQualityHouseNumber": "",
    "matchQualityBuilding": "",
    "matchQualityDistrict": "",
    "matchQualityCity": "",
    "matchQualityPostalCode": "",
    "matchQualityCounty": "",
    "matchQualityState": "",
    "matchQualityCountry": "",
}

ISO_CROSSOVER = {
    "DD": "DDR",
    "AF": "AFG",
    "AX": "ALA",
    "AL": "ALB",
    "DZ": "DZA",
    "AS": "ASM",
    "AD": "AND",
    "AO": "AGO",
    "AI": "AIA",
    "AG": "ATG",
    "AR": "ARG",
    "AM": "ARM",
    "AW": "ABW",
    "AU": "AUS",
    "AT": "AUT",
    "AZ": "AZE",
    "BS": "BHS",
    "BH": "BHR",
    "BD": "BGD",
    "BB": "BRB",
    "BY": "BLR",
    "BE": "BEL",
    "BZ": "BLZ",
    "BJ": "BEN",
    "BM": "BMU",
    "BT": "BTN",
    "BO": "BOL",
    "BQ": "BES",
    "BA": "BIH",
    "BW": "BWA",
    "BR": "BRA",
    "VG": "VGB",
    "BN": "BRN",
    "BG": "BGR",
    "BF": "BFA",
    "BI": "BDI",
    "KH": "KHM",
    "CM": "CMR",
    "CA": "CAN",
    "CV": "CPV",
    "KY": "CYM",
    "CF": "CAF",
    "TD": "TCD",
    "CL": "CHL",
    "CN": "CHN",
    "CX": "CXR",
    "CC": "CCK",
    "CO": "COL",
    "KM": "COM",
    "CG": "COG",
    "CD": "ZAR",
    "CK": "COK",
    "CR": "CRI",
    "HR": "HRV",
    "CU": "CUB",
    "CW": "CUW",
    "CY": "CYP",
    "CZ": "CZE",
    "DK": "DNK",
    "DJ": "DJI",
    "DM": "DMA",
    "DO": "DOM",
    "TL": "TLS",
    "EC": "ECU",
    "EG": "EGY",
    "SV": "SLV",
    "GQ": "GNQ",
    "ER": "ERI",
    "EE": "EST",
    "ET": "ETH",
    "FO": "FRO",
    "FK": "FLK",
    "FJ": "FJI",
    "FI": "FIN",
    "FR": "FRA",
    "GF": "GUF",
    "PF": "PYF",
    "TF": "ATF",
    "GA": "GAB",
    "GM": "GMB",
    "GE": "GEO",
    "DE": "DEU",
    "GH": "GHA",
    "GI": "GIB",
    "GR": "GRC",
    "GL": "GRL",
    "GD": "GRD",
    "GP": "GLP",
    "GU": "GUM",
    "GT": "GTM",
    "GG": "GGY",
    "GN": "GIN",
    "GW": "GNB",
    "GY": "GUY",
    "HT": "HTI",
    "VA": "VAT",
    "HN": "HND",
    "HK": "HKG",
    "HU": "HUN",
    "IS": "ISL",
    "IN": "IND",
    "ID": "IDN",
    "IR": "IRN",
    "IQ": "IRQ",
    "IE": "IRL",
    "IM": "IMN",
    "IL": "ISR",
    "IT": "ITA",
    "CI": "CIV",
    "JM": "JAM",
    "JP": "JPN",
    "JE": "JEY",
    "JO": "JOR",
    "KZ": "KAZ",
    "KE": "KEN",
    "KI": "KIR",
    "KW": "KWT",
    "KG": "KGZ",
    "LA": "LAO",
    "LV": "LVA",
    "LB": "LBN",
    "LS": "LSO",
    "LR": "LBR",
    "LY": "LBY",
    "LI": "LIE",
    "LT": "LTU",
    "LU": "LUX",
    "MO": "MAC",
    "MK": "MKD",
    "MG": "MDG",
    "MW": "MWI",
    "MY": "MYS",
    "MV": "MDV",
    "ML": "MLI",
    "MT": "MLT",
    "MH": "MHL",
    "MQ": "MTQ",
    "MR": "MRT",
    "MU": "MUS",
    "YT": "MYT",
    "MX": "MEX",
    "FM": "FSM",
    "MD": "MDA",
    "MC": "MCO",
    "MN": "MNG",
    "ME": "MNE",
    "MS": "MSR",
    "MA": "MAR",
    "MZ": "MOZ",
    "MM": "MMR",
    "NA": "NAM",
    "NR": "NRU",
    "NP": "NPL",
    "AN": "ANT",
    "NL": "NLD",
    "NC": "NCL",
    "NZ": "NZL",
    "NI": "NIC",
    "NE": "NER",
    "NG": "NGA",
    "NU": "NIU",
    "NF": "NFK",
    "KP": "PRK",
    "MP": "MNP",
    "NO": "NOR",
    "OM": "OMN",
    "PK": "PAK",
    "PW": "PLW",
    "PS": "PSE",
    "PA": "PAN",
    "PG": "PNG",
    "PY": "PRY",
    "PE": "PER",
    "PH": "PHL",
    "PN": "PCN",
    "PL": "POL",
    "PT": "PRT",
    "PR": "PRI",
    "QA": "QAT",
    "RO": "ROU",
    "RU": "RUS",
    "RW": "RWA",
    "RE": "REU",
    "BL": "BLM",
    "KN": "KNA",
    "SH": "SHN",
    "LC": "LCA",
    "MF": "MAF",
    "PM": "SPM",
    "VC": "VCT",
    "WS": "WSM",
    "SM": "SMR",
    "ST": "STP",
    "SA": "SAU",
    "SN": "SEN",
    "RS": "SRB",
    "SC": "SYC",
    "SL": "SLE",
    "SG": "SGP",
    "SX": "SXM",
    "SK": "SVK",
    "SI": "SVN",
    "SB": "SLB",
    "SO": "SOM",
    "ZA": "ZAF",
    "GS": "SGS",
    "KR": "KOR",
    "SS": "SSD",
    "ES": "ESP",
    "LK": "LKA",
    "SD": "SDN",
    "SR": "SUR",
    "SZ": "SWZ",
    "SE": "SWE",
    "CH": "CHE",
    "SY": "SYR",
    "TW": "TWN",
    "TJ": "TJK",
    "TZ": "TZA",
    "TH": "THA",
    "TG": "TGO",
    "TK": "TKL",
    "TO": "TON",
    "TT": "TTO",
    "TN": "TUN",
    "TR": "TUR",
    "TM": "TKM",
    "TC": "TCA",
    "TV": "TUV",
    "UG": "UGA",
    "UA": "UKR",
    "AE": "ARE",
    "GB": "GBR",
    "US": "USA",
    "VI": "VIR",
    "UY": "URY",
    "UZ": "UZB",
    "VU": "VUT",
    "VE": "VEN",
    "VN": "VNM",
    "WF": "WLF",
    "EH": "ESH",
    "YE": "YEM",
    "ZM": "ZMB",
    "ZW": "ZWE",
}


def get_isocrossover(reverse: str = False):
    """Return a dict of iso crossover"""
    out = ISO_CROSSOVER
    if reverse:
        out = {v: k for k, v in out.items()}
    return out


def list_countrycodes():
    """Return a list of country codes (iso 2 and 3)"""
    countrycodes = ISO_CROSSOVER
    return list(countrycodes.keys()) + list(countrycodes.values()) + ["BRD"]
